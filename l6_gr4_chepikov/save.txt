def method_1(image):
    # Преобразуем изображение в grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Применяем оператор Собеля для выделения границ
    grad_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
    grad_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
    
    grad_x *= 1.2
    grad_y *= 1.6
    
    grad = cv2.magnitude(grad_x, grad_y)  # Комбинированный градиент
    grad = cv2.convertScaleAbs(grad)  # Преобразуем результат в 8-битное изображение
    show_image(grad, "Gradient Image")
    
    # Усиливаем контраст после градиента
    contrast_grad = cv2.convertScaleAbs(grad, alpha=1.5, beta=20)  # alpha увеличивает контраст, beta смещает яркость
    show_image(contrast_grad, "Enhanced Gradient Image")
    
    # # Применяем Gaussian blur для размытия
    # blurred = cv2.GaussianBlur(contrast_grad, (5, 5), 0)  # (5, 5) — размер ядра, 0 — стандартное отклонение
    # show_image(blurred, "Blurred Image")

    # Применяем минимальный фильтр (Erosion)
    min_filtered = cv2.erode(contrast_grad, np.ones((2, 1), np.uint8), iterations=1)
    show_image(min_filtered, "Min Filtered Image")

    # Бинаризация с использованием метода Оцу для более точной пороговой обработки
    _, thresh = cv2.threshold(min_filtered, 0, 100, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    show_image(thresh, "Threshold Image")

    # Применяем медианный фильтр
    median_blurred = cv2.medianBlur(thresh, 7)
    show_image(median_blurred, "Median Blurred Image")

    # Поиск контуров
    contours, hierarchy = cv2.findContours(median_blurred, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # Выбираем самый длинный контур
    longest_contour = max(contours, key=lambda c: cv2.arcLength(c, True))

    # Рисуем только самый длинный контур белым цветом
    contour_image = cv2.cvtColor(gray, cv2.COLOR_GRAY2BGR)
    cv2.drawContours(contour_image, [longest_contour], -1, (255, 255, 255), 2)  # Белый цвет
    show_image(contour_image, "Longest Contour in White")

    return contour_image
